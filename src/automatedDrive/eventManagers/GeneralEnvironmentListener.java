package automatedDrive.eventManagers;

import automatedDrive.car.AutomatedCar;
import automatedDrive.car.ObjetAvoider;
import automatedDrive.configuration.MovementParameters;
import automatedDrive.configuration.SensorPorts;
import automatedDrive.enums.Action;
import driveControl.Navigator;
import lego.robot.interfaces.SensorPortListener;
import lejos.hardware.port.Port;
import threadCommunication.singletons.CurrentPositionSingleton;

/**
 * Listener for events generated by sensors in relation with the environment
 * @author Programming
 *
 */
public class GeneralEnvironmentListener implements SensorPortListener, SensorPorts, MovementParameters {

	/**
	 * Controlled car
	 */
	private AutomatedCar car;

	/**
	 * Navigator to manage movements to avoid objects
	 */
	private Navigator nav;


	/**
	 * Final constructor for the listener
	 * @param car: car to be controlled
	 */
	public GeneralEnvironmentListener(AutomatedCar car) {
		this.car = car;
	}

	@Override
	public void stateChanged(Port aSource, float oldV, float newV) {
		//		System.out.println(" Event caught"
		//				+ "\n from the"
		//				+ "\n environment");

		if(aSource.equals(IR_leJOS)) {
			if(car.currentAction == Action.TRAVELING) {
				if(newV < MIN_DISTANCE) {
					manageObjectAvoiding();
				}
			}

		}

	}

	/**
	 * Setter for the navigator which is not required in the constructor
	 * @param nav: the navigator to set
	 */
	public void setNav(Navigator nav) {
		this.nav = nav;
	}
	
	/**
	 * This method manages the avoiding of the object
	 */
	public void manageObjectAvoiding() {
		car.stop();
		car.setInitialArea(CurrentPositionSingleton.getCurrentPositionSingleton().getCurrentPosition());
		ObjetAvoider avoid = new ObjetAvoider(car, nav);
		avoid.recalculatePath(avoid.generateArea());
		nav.resumeTravel(nav.getTravelingTo());
	}



}
